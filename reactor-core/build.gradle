/*
 * Copyright (c) 2011-2018 Pivotal Software Inc, All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import me.champeau.gradle.japicmp.JapicmpTask

apply plugin: 'idea' //needed to avoid IDEA seeing the jmh folder as source
apply plugin: 'osgi'
apply plugin: 'org.unbroken-dome.test-sets'

sourceSets {
  noMicrometerTest {
	java.srcDir 'src/test/java'
	resources.srcDir 'src/test/resources'
  }
}

testSets {
  blockHoundTest
}

configurations {
  compileOnly.extendsFrom jsr166backport
  testCompile.extendsFrom jsr166backport
  noMicrometerTestRuntime {
	extendsFrom testRuntime
	exclude group:"io.micrometer", module:"micrometer-core"
  }
}

dependencies {
  // Reactive Streams
  compile "org.reactivestreams:reactive-streams:1.0.2"
  testCompile "org.reactivestreams:reactive-streams-tck:1.0.2"

  // JSR-305 annotations
  optional "com.google.code.findbugs:jsr305:3.0.2"

  //Optional Logging Operator
  optional "org.slf4j:slf4j-api:$slf4jVersion"

  //Optional Metrics
  optional "io.micrometer:micrometer-core:$micrometerVersion"

  optional("org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}")

  //Optional BlockHound support
  optional 'io.projectreactor.tools:blockhound:1.0.0.M3'

  //Optional JDK 9 Converter
  jsr166backport "io.projectreactor:jsr166:1.0.0.RELEASE"

  testCompile 'junit:junit:4.12'

  testRuntime "ch.qos.logback:logback-classic:$logbackVersion"
  testRuntime "io.micrometer:micrometer-core:$micrometerVersion"
  // Testing
  testCompile(project(":reactor-test")) {
	exclude module: 'reactor-core'
  }

  testCompile "org.hamcrest:hamcrest-library:1.3",
		  "org.testng:testng:6.8.5",
		  "org.assertj:assertj-core:$assertJVersion",
		  "org.mockito:mockito-core:$mockitoVersion",
		  "org.openjdk.jol:jol-core:0.9",
		  "pl.pragmatists:JUnitParams:$jUnitParamsVersion",
		  "org.awaitility:awaitility:3.1.2"

  noMicrometerTestCompile sourceSets.main.output
  noMicrometerTestCompile sourceSets.test.output
  noMicrometerTestCompile configurations.testCompile
}

task downloadBaseline {
  if (project.gradle.startParameter.isOffline()) {
	println "Offline: skipping downloading of baseline and JAPICMP"
  }
  else if ("$compatibleVersion" == "SKIP") {
	println "SKIP: Instructed to skip the baseline comparison"
  }
  else {
	println "Will download and perform baseline comparison with ${compatibleVersion}"
	finalizedBy { doDownloadBaseline }
  }
}

task doDownloadBaseline(type: Download) {
  onlyIfNewer true
  compress true

  src "${repositories.mavenCentral().url}io/projectreactor/reactor-core/$compatibleVersion/reactor-core-${compatibleVersion}.jar"
  dest "${buildDir}/baselineLibs/reactor-core-${compatibleVersion}.jar"

  finalizedBy { japicmp }
}

task japicmp(type: JapicmpTask) {
  oldClasspath = files("${buildDir}/baselineLibs/reactor-core-${compatibleVersion}.jar")
  newClasspath = files(jar.archivePath)
  onlyBinaryIncompatibleModified = true
  failOnModification = true
  failOnSourceIncompatibility = true
  txtOutputFile = file("${project.buildDir}/reports/japi.txt")
  ignoreMissingClasses = true
  includeSynthetic = true

  //TODO after a release, bump the gradle.properties baseline
  //TODO after a release, remove the reactor-core exclusions below if any
  classExcludes = [
		  'reactor.core.publisher.WorkQueueProcessor',
		  'reactor.core.publisher.TopicProcessor',
		  'reactor.core.publisher.EventLoopProcessor$Slot',
		  'reactor.util.concurrent.WaitStrategy',
		  'reactor.core.publisher.MonoProcessor'
  ]
//	classExcludes = []
//	methodExcludes = ["reactor.core.Scannable#operatorName()"]
}

javadoc {
  dependsOn jar
  group = "documentation"
  description = "Generates aggregated Javadoc API documentation."
  title = "Reactor Core $version"

  options.addStringOption('charSet', 'UTF-8')

  options.memberLevel = org.gradle.external.javadoc.JavadocMemberLevel.PROTECTED
  options.author = true
  options.header = "$project.name"
  options.overview = "$rootDir/docs/api/overview.html"
  options.stylesheetFile = file("$rootDir/docs/api/stylesheet.css")
  options.links(rootProject.ext.javadocLinks )
  options.tags = [ "apiNote:a:API Note:", "implSpec:a:Implementation Requirements:",
				   "implNote:a:Implementation Note:", "reactor.errorMode:m:Error Mode Support",
				   "reactor.discard:m:onDiscard Support"]

  // In Java 9, javadoc generator will complain if it finds invalid class files in the classpath
  // And Kotlin produces such classes, plus kotlin plugin puts them in the main sourceSet
  classpath = sourceSets.main.output.filter { !it.absolutePath.contains("kotlin") }
  classpath += sourceSets.main.compileClasspath

  maxMemory = "1024m"
  destinationDir = new File(project.buildDir, "docs/javadoc")

  excludes = [
		  // Must be public due to the ServiceLoader's requirements
		  "reactor/core/scheduler/ReactorBlockHoundIntegration.java",
  ]

  doLast {
	// work around https://github.com/gradle/gradle/issues/4046
	copy {
	  from('src/main/java')
	  into "$project.buildDir/docs/javadoc/"
	  include "**/doc-files/**/*"
	}
  }
}

task testStaticInit(type: Test, group: 'verification') {
  systemProperty 'reactor.trace.operatorStacktrace', 'true'
  include '**/*TestStaticInit.*'
  doFirst {
	println "Additional tests from `testStaticInit` ($includes)"
  }
  afterSuite { TestDescriptor descriptor, TestResult result ->
	if (result.testCount > 0 && (result.skippedTestCount + result.failedTestCount + result.successfulTestCount == 0)) {
	  throw new GradleException("No static initialization tests were executed")
	}
  }
}

task loops(type: Test, group: 'verification') {
  mustRunAfter testStaticInit
  include '**/*Loop.*'
  doFirst {
	println "Additional tests from `loops` ($includes)"
  }
}

task testNG(type: Test, group: 'verification') {
  mustRunAfter testStaticInit
  useTestNG()
  include '**/*Verification.*'
  doFirst {
	println "Additional tests from `testNG` ($includes)"
  }
}

task testNoMicrometer(type: Test, group: 'verification') {
  testClassesDirs = sourceSets.noMicrometerTest.output.classesDirs
  classpath = sourceSets.noMicrometerTest.runtimeClasspath
  include '**/*NoMicrometerTest.*'

  doFirst {
	println "Additional tests without Micrometer ($includes)"
  }
}

//inherit basic test task + common configuration in root
//always depend on testStaticInit, skip testNG on Travis, skip loops when not releasing
//note that this way the tasks can be run individually
test {
  dependsOn testStaticInit
  dependsOn testNoMicrometer
  if (System.env.TRAVIS != "true") {
	dependsOn testNG
  }
  if (!version.endsWith('BUILD-SNAPSHOT')) {
	dependsOn loops
  }
}

if (!JavaVersion.current().isJava9Compatible()) {
  test {
	jvmArgs = ["-Xbootclasspath/p:" + configurations.jsr166backport.asPath]
  }
}

jar {
  manifest {
	attributes 'Implementation-Title': 'reactor-core',
			'Implementation-Version': version,
			'Automatic-Module-Name': 'reactor.core'
	instruction 'Import-Package', bundleImportPackages.join(',')
  }
}

artifacts {
  archives sourcesJar
  archives javadocJar
  archives rootProject.tasks.docsZip
}

jacocoTestReport.dependsOn test
check.dependsOn jacocoTestReport
jar.finalizedBy(downloadBaseline)

if (JavaVersion.current().java9Compatible) {
  sourceSets {
	java8stubs.java.srcDirs = ['src/main/java8stubs']
	java9 {
	  compileClasspath += main.output
	  java.srcDirs = ['src/main/java9']
	}
  }

  tasks.withType(JavaCompile).all {
	if (it == compileJava9Java) {
	  sourceCompatibility = targetCompatibility = 9
	  options.compilerArgs.addAll(['--add-exports', 'java.base/jdk.internal.misc=ALL-UNNAMED'])
	}
	else {
	  sourceCompatibility = targetCompatibility = 8
	}
  }

  [jar]*.each {
	it.from sourceSets.java9.output
  }

  tasks.withType(Test).all {
	classpath = sourceSets.java9.output + files(it.classpath)
  }

  tasks.withType(Javadoc).all {
	excludes = ["reactor/core/publisher/Traces.java"]
  }

  dependencies {
	compileOnly sourceSets.java8stubs.output
  }
}
else {
  sourceSets {
	java9stubs.java.srcDirs = ['src/main/java9stubs']
  }

  dependencies {
	compileOnly sourceSets.java9stubs.output
  }
}