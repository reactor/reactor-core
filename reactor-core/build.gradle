/*
 * Copyright (c) 2011-2023 VMware Inc. or its affiliates, All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import me.champeau.gradle.japicmp.JapicmpTask

apply plugin: 'idea' // needed to avoid IDEA seeing the jmh folder as source
apply plugin: 'biz.aQute.bnd.builder'
apply plugin: 'jvm-test-suite'
apply plugin: 'jcstress'
apply plugin: 'java-library'
apply plugin: 'me.champeau.mrjar'

ext {
	bndOptions = [
		"Export-Package": [
			"!*internal*",
			"!reactor.blockhound*",
			"reactor.*;version=$osgiVersion"
		].join(","),
		"Import-Package": [
			"!javax.annotation",
			"!javax.annotation.meta",
			'org.slf4j;resolution:=optional;version="[1.5.4,2)"',
			"reactor.blockhound.*;resolution:=optional",
			"io.micrometer.*;resolution:=optional",
			"*"
		].join(","),
		"Bundle-Name" : "reactor-core",
		"Bundle-SymbolicName" : "io.projectreactor.reactor-core",
		"Bundle-Version" : "$osgiVersion"
	]
}

multiRelease {
  targetVersions 8, 9, 21
}

testing {
  suites {
	test {
	  useJUnitJupiter()
	}
	blockHoundTest(JvmTestSuite) {
	  useJUnitJupiter()
	  sources.java.srcDirs = ['src/blockHoundTest/java']
	  dependencies {
		implementation project()
	  }
	}
	tckTest(JvmTestSuite) {
	  useTestNG()
	  sources.java.srcDirs = ['src/tckTest/java']
	  dependencies {
		implementation project()
		implementation sourceSets.test.output
	  }
	}
	withMicrometerTest(JvmTestSuite) {
	  useJUnitJupiter()
	  sources.java.srcDirs = ['src/withMicrometerTest/java']
	  dependencies {
		implementation project()
		implementation sourceSets.test.output
	  }
	}
	withContextPropagation102Test(JvmTestSuite) {
	  useJUnitJupiter()
	  sources.java.srcDirs = ['src/withContextPropagation102Test/java']
	  dependencies {
		implementation project()
		implementation sourceSets.test.output
	  }
	}
  }
}

configurations {
	compileOnly.extendsFrom jsr166backport
	testCompileOnly.extendsFrom jsr166backport

  	blockHoundTestApi.extendsFrom testApi
  	blockHoundTestImplementation.extendsFrom testImplementation
  	blockHoundTestCompileOnly.extendsFrom testCompileOnly
  	tckTestApi.extendsFrom testApi
  	tckTestImplementation.extendsFrom testImplementation
  	tckTestCompileOnly.extendsFrom testCompileOnly
  	withMicrometerTestApi.extendsFrom testApi
  	withMicrometerTestImplementation.extendsFrom testImplementation
  	withMicrometerTestCompileOnly.extendsFrom testCompileOnly
  	withContextPropagation102TestApi.extendsFrom testApi
  	withContextPropagation102TestImplementation.extendsFrom testImplementation
  	withContextPropagation102TestCompileOnly.extendsFrom testCompileOnly
}

dependencies {
	// Reactive Streams
	api libs.reactiveStreams
	java21Implementation libs.reactiveStreams
	tckTestImplementation (libs.reactiveStreams.tck) {
		/*
		Without this exclusion, testng brings an old version of junit (3.8.1).
		TestNG later versions can also bring JUnit 4.x which themselves bring an old version of hamcrest
		which gets picked up first and that we don't want. TCK runs fine w/o (old) junit 3/4.

		We exclude the old JUnit, and for safety we also explicitly require latest versions of
		TestNG separately below.

		reactive streams 1.0.3 -> testng 5.14.10 -> Junit 3.8.1
		testng 6.8.5 -> Junit 4.10 -> Hamcrest 1.1
		testng 7.4.0 (latest as of this comment) -> JUnit 4.13 -> Hamcrest 1.3
		*/
		exclude group: 'junit', module: 'junit'
	}
	tckTestImplementation "org.testng:testng:$testngVersion"

	// JSR-305 annotations
	compileOnly libs.jsr305
	testCompileOnly libs.jsr305

	// Optional Logging Operator
	compileOnly "org.slf4j:slf4j-api:$slf4jVersion"
	testCompileOnly "org.slf4j:slf4j-api:$slf4jVersion"

	// Optional Metrics
	compileOnly platform(libs.micrometer.bom)
	compileOnly libs.micrometer.commons
	compileOnly libs.micrometer.core

	// Optional context-propagation
	compileOnly libs.micrometer.contextPropagation

	// Optional BlockHound support
	compileOnly "io.projectreactor.tools:blockhound:$blockhoundVersion"
	// Also make BlockHound visible in the CP of dedicated testset
	blockHoundTestImplementation "io.projectreactor.tools:blockhound:$blockhoundVersion"

	// Optional JDK 9 Converter
	jsr166backport libs.jsr166backport

	// Testing
	testImplementation platform("org.junit:junit-bom:$junitVersion")
	testImplementation "org.junit.jupiter:junit-jupiter-api"
	testImplementation "org.junit.platform:junit-platform-launcher"
	testImplementation "org.junit.jupiter:junit-jupiter-params"
	testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
	testImplementation(project(":reactor-test")) {
		exclude module: 'reactor-core'
	}
	testImplementation "ch.qos.logback:logback-classic:$logbackVersion" //need to access API to decrease some tests verbosity
	testImplementation "org.assertj:assertj-core:$assertjVersion"
	testImplementation "org.mockito:mockito-core:$mockitoVersion"
	testImplementation "org.openjdk.jol:jol-core:$javaObjectLayoutVersion"
	testImplementation "org.awaitility:awaitility:$awaitilityVersion"
	testImplementation "com.pivovarit:throwing-function:$throwingFunctionVersion"
	testImplementation "com.tngtech.archunit:archunit:$archUnitVersion"

	// withMicrometerTest is a test-set that validates what happens when micrometer *IS*
	// on the classpath. Needs sourceSets.test.output because tests there use helpers like AutoDisposingRule etc.
	withMicrometerTestImplementation platform(libs.micrometer.bom)
	withMicrometerTestImplementation libs.micrometer.commons
	withMicrometerTestImplementation libs.micrometer.core
	withMicrometerTestImplementation libs.micrometer.contextPropagation
	withMicrometerTestImplementation sourceSets.test.output

	withContextPropagation102TestImplementation platform(libs.micrometer102Compatible.bom)
	withContextPropagation102TestImplementation libs.micrometer.commons
	withContextPropagation102TestImplementation libs.micrometer.core
	withContextPropagation102TestImplementation libs.micrometer.contextPropagation102
	withContextPropagation102TestImplementation sourceSets.test.output

	jcstressImplementation(project(":reactor-test")) {
		exclude module: 'reactor-core'
	}
	jcstressImplementation "ch.qos.logback:logback-classic:$logbackVersion"

}

task downloadBaseline(type: Download) {
	onlyIfNewer true
	compress true

	src "${repositories.mavenCentral().url}io/projectreactor/reactor-core/${libs.versions.baseline.core.api.get()}/reactor-core-${libs.versions.baseline.core.api.get()}.jar"
	dest "${buildDir}/baselineLibs/reactor-core-${libs.versions.baseline.core.api.get()}.jar"
}

def japicmpReport = tasks.register('japicmpReport') {
	onlyIf {
		japicmp.state.failure != null
	}
	doLast {
		def reportFile = file("${project.buildDir}/reports/japi.txt")
		if (reportFile.exists()) {
			println "\n **********************************"
			println " * /!\\ API compatibility failures *"
			println " **********************************"
			println "Japicmp report was filtered and interpreted to find the following incompatibilities:"
			reportFile.eachLine {
				if (it.contains("*") && (!it.contains("***") || it.contains("****")))
					println "source incompatible change: $it"
				else if (it.contains("!"))
					println "binary incompatible change: $it"
			}
		}
		else println "No incompatible change to report"
	}
}

task japicmp(type: JapicmpTask) {
	if (project.gradle.startParameter.isOffline()) {
		println "Offline: skipping downloading of baseline and JAPICMP"
		enabled = false
	}
	else if ("${libs.versions.baseline.core.api.get()}" == "SKIP") {
		println "SKIP: Instructed to skip the baseline comparison"
		enabled = false
	}
	else {
		println "Will download and perform baseline comparison with ${libs.versions.baseline.core.api.get()}"
		dependsOn(downloadBaseline)
		dependsOn(jar)
		finalizedBy(japicmpReport)
	}

	oldClasspath.from(files("${buildDir}/baselineLibs/reactor-core-${libs.versions.baseline.core.api.get()}.jar"))
	newClasspath.from(files(jar.archiveFile))
	// these onlyXxx parameters result in a report that is slightly too noisy, but better than
	// onlyBinaryIncompatibleModified = true which masks source-incompatible-only changes
	onlyBinaryIncompatibleModified = false
	onlyModified = true
	failOnModification = true
	failOnSourceIncompatibility = true
	txtOutputFile = file("${project.buildDir}/reports/japi.txt")
	ignoreMissingClasses = true
	includeSynthetic = true
	compatibilityChangeExcludes = [ "METHOD_NEW_DEFAULT" ]

	// TODO after a .0 release, bump the gradle.properties baseline
	// TODO after a .0 release, remove the reactor-core exclusions below if any
	classExcludes = [
	]
	methodExcludes = [
	]
}

gradle.taskGraph.afterTask { task, state ->
	if (task instanceof JapicmpTask && state.failure && ((JapicmpTask) task).richReport == null) {
		//FIXME print the rich report somehow on console ?
		print file("${project.buildDir}/reports/japi.txt").getText()
	}
}

// complements the javadoc.gradle common configuration
javadoc {
	options.overview = "$rootDir/docs/api/overview.html"
	excludes = [
			// Must be public due to the ServiceLoader's requirements
			"reactor/core/scheduler/ReactorBlockHoundIntegration.java"
	]
	doLast {
		// work around https://github.com/gradle/gradle/issues/4046
		copy {
			from('src/main/java')
			into "$project.buildDir/docs/javadoc/"
			include "**/doc-files/**/*"
		}
	}
}

task loops(type: Test, group: 'verification') {
	include '**/*Loop.*'
	doFirst {
		println "Additional tests from `loops` ($includes)"
	}
}

test {
  def tags = rootProject.findProperty("junit-tags")
  if (tags != null) {
	println "junit5 tags for core: $tags"
	useJUnitPlatform() {
	  includeTags "$tags"
	}
  }
  else {
	useJUnitPlatform()
  }
}

java21Test {
  println("Available number of processors is " + Runtime.getRuntime().availableProcessors())
  if (Runtime.getRuntime().availableProcessors() <= 2) {
	systemProperty "jdk.virtualThreadScheduler.parallelism", "6"
  }
  systemProperty "reactor.schedulers.defaultBoundedElasticOnVirtualThreads", "true"
}

tasks.withType(Test).matching { !(it.name in testing.suites.names) }.configureEach {
  def tags = rootProject.findProperty("junit-tags")
  if (tags != null) {
	println "junit5 tags for core: $tags"
	useJUnitPlatform() {
	  includeTags "$tags"
	}
  }
  else {
	useJUnitPlatform()
  }
}

tckTest {
	include '**/*Verification.*'
	doFirst {
		println "Additional tests from `${name}` (${includes})"
	}
}


blockHoundTest {
	// Creates a JVM per test because the agent can be installed only once
	forkEvery = 1
	maxParallelForks = 1
}

jcstress {
	mode = 'quick' //quick, default, tough
    jcstressDependency 'org.openjdk.jcstress:jcstress-core:0.16'
	heapPerFork = 512
}

// inherit basic test task + common configuration in root
// always depend on withMicrometerTest, blockHoundTest and tckTest, skip loops when not releasing
// note that this way the tasks can be run individually
check {
	dependsOn withContextPropagation102Test
	dependsOn withMicrometerTest
	dependsOn blockHoundTest
	dependsOn tckTest
	if (!version.endsWith('-SNAPSHOT') && !version.contains('-SNAPSHOT-')) { //neither classic nor customized snapshots
		dependsOn loops
	}
	dependsOn tasks.jcstress
}

// TODO all java9 / stubs / java-specific stuff should go in a convention plugin ?
if (!JavaVersion.current().isJava9Compatible()) {
	test {
		jvmArgs = ["-Xbootclasspath/p:" + configurations.jsr166backport.asPath]
	}
}

if (JavaVersion.current().isCompatibleWith(JavaVersion.VERSION_13)) {
  blockHoundTest {
		jvmArgs = ["-XX:+AllowRedefinitionToAddDeleteMethods"]
  }
}

jar {
	manifest {
		attributes 'Implementation-Title': 'reactor-core',
			'Implementation-Version': project.version,
			'Automatic-Module-Name': 'reactor.core'
	}
	bnd(bndOptions)

	bundle {
	  // workaround for multi-version JARs
	  //  see https://github.com/bndtools/bnd/issues/2227
	  bnd '''\
						  -fixupmessages: '^Classes found in the wrong directory: .*'
						  -exportcontents: io.micrometer.*
						  '''.stripIndent()
	}
}

jacocoTestReport.dependsOn test
check.dependsOn jacocoTestReport
check.dependsOn japicmp

// docs.zip is added in afterEvaluate block in setup.gradle
