/*
 * Copyright (c) 2011-2022 VMware Inc. or its affiliates, All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import me.champeau.gradle.japicmp.JapicmpTask

apply plugin: 'idea' // needed to avoid IDEA seeing the jmh folder as source
apply plugin: 'biz.aQute.bnd.builder'
apply plugin: 'org.unbroken-dome.test-sets'
apply plugin: 'jcstress'
apply plugin: 'java-library'

ext {
	bndOptions = [
		"Export-Package": [
			"!*internal*",
			"!reactor.blockhound*",
			"reactor.*;version=$osgiVersion"
		].join(","),
		"Import-Package": [
			"!javax.annotation",
			"!javax.annotation.meta",
			'org.slf4j;resolution:=optional;version="[1.5.4,2)"',
			"reactor.blockhound.*;resolution:=optional",
			"io.micrometer.*;resolution:=optional",
			"*"
		].join(","),
		"Bundle-Name" : "reactor-core",
		"Bundle-SymbolicName" : "io.projectreactor.reactor-core",
		"Bundle-Version" : "$osgiVersion"
	]
}

testSets {
	blockHoundTest
	withMicrometerTest
	tckTest
}

configurations {
	compileOnly.extendsFrom jsr166backport
	testCompileOnly.extendsFrom jsr166backport
}

dependencies {
	// Reactive Streams
	api libs.reactiveStreams
	tckTestImplementation (libs.reactiveStreams.tck) {
		/*
		Without this exclusion, testng brings an old version of junit (3.8.1).
		TestNG later versions can also bring JUnit 4.x which themselves bring an old version of hamcrest
		which gets picked up first and that we don't want. TCK runs fine w/o (old) junit 3/4.

		We exclude the old JUnit, and for safety we also explicitly require latest versions of
		TestNG separately below.

		reactive streams 1.0.3 -> testng 5.14.10 -> Junit 3.8.1
		testng 6.8.5 -> Junit 4.10 -> Hamcrest 1.1
		testng 7.4.0 (latest as of this comment) -> JUnit 4.13 -> Hamcrest 1.3
		*/
		exclude group: 'junit', module: 'junit'
	}
	tckTestImplementation libs.testNg

	// JSR-305 annotations
	compileOnly libs.jsr305
	testCompileOnly libs.jsr305

	// Optional Logging Operator
	compileOnly libs.slf4j
	testCompileOnly libs.slf4j

	// Optional Metrics
	compileOnly platform(libs.micrometer.bom)
	compileOnly libs.micrometer.commons
	compileOnly libs.micrometer.core

	// Optional BlockHound support
	compileOnly libs.blockhound
	// Also make BlockHound visible in the CP of dedicated testset
	blockHoundTestImplementation libs.blockhound

	// Optional JDK 9 Converter
	jsr166backport libs.jsr166backport

	// Testing
	testImplementation platform(libs.junit.bom)
	testImplementation "org.junit.jupiter:junit-jupiter-api"
	testImplementation "org.junit.platform:junit-platform-launcher"
	testImplementation "org.junit.jupiter:junit-jupiter-params"
	testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
	testImplementation(project(":reactor-test")) {
		exclude module: 'reactor-core'
	}
	testImplementation libs.logback //need to access API to decrease some tests verbosity
	testImplementation libs.assertj
	testImplementation libs.mockito
	testImplementation libs.javaObjectLayout
	testImplementation libs.awaitility
	testImplementation libs.throwingFunction
	testImplementation libs.archUnit

	// withMicrometerTest is a test-set that validates what happens when micrometer *IS*
	// on the classpath. Needs sourceSets.test.output because tests there use helpers like AutoDisposingRule etc.
	withMicrometerTestImplementation platform(libs.micrometer.bom)
	withMicrometerTestImplementation libs.micrometer.commons
	withMicrometerTestImplementation libs.micrometer.core
	withMicrometerTestImplementation sourceSets.test.output

	jcstressImplementation(project(":reactor-test")) {
		exclude module: 'reactor-core'
	}
	jcstressImplementation libs.logback

}

task downloadBaseline(type: Download) {
	onlyIfNewer true
	compress true

	src "${repositories.mavenCentral().url}io/projectreactor/reactor-core/${libs.versions.baseline.core.api.get()}/reactor-core-${libs.versions.baseline.core.api.get()}.jar"
	dest "${buildDir}/baselineLibs/reactor-core-${libs.versions.baseline.core.api.get()}.jar"
}

task japicmp(type: JapicmpTask) {
	if (project.gradle.startParameter.isOffline()) {
		println "Offline: skipping downloading of baseline and JAPICMP"
		enabled = false
	}
	else if ("${libs.versions.baseline.core.api.get()}" == "SKIP") {
		println "SKIP: Instructed to skip the baseline comparison"
		enabled = false
	}
	else {
		println "Will download and perform baseline comparison with ${libs.versions.baseline.core.api.get()}"
		dependsOn(downloadBaseline)
		dependsOn(jar)
	}

	oldClasspath.from(files("${buildDir}/baselineLibs/reactor-core-${libs.versions.baseline.core.api.get()}.jar"))
	newClasspath.from(files(jar.archiveFile))
	onlyBinaryIncompatibleModified = true
	failOnModification = true
	failOnSourceIncompatibility = true
	txtOutputFile = file("${project.buildDir}/reports/japi.txt")
	ignoreMissingClasses = true
	includeSynthetic = true

	// TODO after a .0 release, bump the gradle.properties baseline
	// TODO after a .0 release, remove the reactor-core exclusions below if any
	classExcludes = [
		"reactor.core.publisher.FluxExtensionsKt",
		"reactor.core.publisher.MonoExtensionsKt",
		"reactor.core.publisher.MonoWhenFunctionsKt",
		"reactor.util.function.TupleExtensionsKt"
	]
	methodExcludes = [
		'reactor.core.publisher.Mono#doAfterSuccessOrError(java.util.function.BiConsumer)',
		'reactor.core.publisher.Mono#doOnSuccessOrError(java.util.function.BiConsumer)',
		'reactor.core.publisher.Sinks$EmitFailureHandler#busyLooping(java.time.Duration)',
		'reactor.core.publisher.Flux#deferWithContext(java.util.function.Function)',
		'reactor.core.publisher.Flux#subscriberContext(reactor.util.context.Context)',
		'reactor.core.publisher.Flux#subscriberContext(java.util.function.Function)',
		'reactor.core.publisher.Mono#deferWithContext(java.util.function.Function)',
		'reactor.core.publisher.Mono#subscriberContext()',
		'reactor.core.publisher.Mono#subscriberContext(reactor.util.context.Context)',
		'reactor.core.publisher.Mono#subscriberContext(java.util.function.Function)',
		'reactor.core.publisher.Signal#getContext()',
		'reactor.util.context.Context#putAll(reactor.util.context.Context)',
		'reactor.core.scheduler.Schedulers#elastic()',
		'reactor.core.scheduler.Schedulers#newElastic(java.lang.String)',
		'reactor.core.scheduler.Schedulers#newElastic(java.lang.String, int)',
		'reactor.core.scheduler.Schedulers#newElastic(java.lang.String, int, boolean)',
		'reactor.core.scheduler.Schedulers#newElastic(int, java.util.concurrent.ThreadFactory)',
		'reactor.core.scheduler.Schedulers$Factory#newElastic(int, java.util.concurrent.ThreadFactory)',
		'reactor.core.publisher.FluxSink#contextView()',
		'reactor.core.publisher.MonoSink#contextView()',
		'reactor.core.publisher.SynchronousSink#contextView()',
		'reactor.core.publisher.Sinks#unsafe()',
		'reactor.core.Scannable#tagsDeduplicated()'
	]
}

gradle.taskGraph.afterTask { task, state ->
	if (task instanceof JapicmpTask && state.failure && ((JapicmpTask) task).richReport == null) {
		//FIXME print the rich report somehow on console ?
		print file("${project.buildDir}/reports/japi.txt").getText()
	}
}

// complements the javadoc.gradle common configuration
javadoc {
	options.overview = "$rootDir/docs/api/overview.html"
	excludes = [
			// Must be public due to the ServiceLoader's requirements
			"reactor/core/scheduler/ReactorBlockHoundIntegration.java"
	]
	doLast {
		// work around https://github.com/gradle/gradle/issues/4046
		copy {
			from('src/main/java')
			into "$project.buildDir/docs/javadoc/"
			include "**/doc-files/**/*"
		}
	}
}

task loops(type: Test, group: 'verification') {
	include '**/*Loop.*'
	doFirst {
		println "Additional tests from `loops` ($includes)"
	}
}

tasks.withType(Test).all {
	if (it.name == "test") {
		//configure tag support for the core test task
		def tags = rootProject.findProperty("junit-tags")
		if (tags != null) {
			println "junit5 tags for core: $tags"
			useJUnitPlatform() {
				includeTags "$tags"
			}
		}
		else {
			useJUnitPlatform()
		}
	}
	else if (it.name != "tckTest") {
		//default to JunitPlatform
		useJUnitPlatform()
	}
}

tckTest {
	useTestNG()
	include '**/*Verification.*'
	doFirst {
		println "Additional tests from `${name}` (${includes})"
	}
}


blockHoundTest {
	// Creates a JVM per test because the agent can be installed only once
	forkEvery = 1
	maxParallelForks = 1
}

jcstress {
	mode = 'quick' //quick, default, tough
}

// inherit basic test task + common configuration in root
// always depend on withMicrometerTest, blockHoundTest and tckTest, skip loops when not releasing
// note that this way the tasks can be run individually
check {
	dependsOn withMicrometerTest
	dependsOn blockHoundTest
	dependsOn tckTest
	if (!version.endsWith('-SNAPSHOT') && !version.contains('-SNAPSHOT-')) { //neither classic nor customized snapshots
		dependsOn loops
	}
	dependsOn tasks.jcstress
}

// TODO all java9 / stubs / java-specific stuff should go in a convention plugin ?
if (!JavaVersion.current().isJava9Compatible()) {
	test {
		jvmArgs = ["-Xbootclasspath/p:" + configurations.jsr166backport.asPath]
	}
}

jar {
	manifest {
		attributes 'Implementation-Title': 'reactor-core',
			'Implementation-Version': project.version,
			'Automatic-Module-Name': 'reactor.core'
	}
	bnd(bndOptions)
}

jacocoTestReport.dependsOn test
check.dependsOn jacocoTestReport
check.dependsOn japicmp


if (JavaVersion.current().java9Compatible) {
	// SharedSecretsCallSiteSupplierFactory is a Java 8 specific optimization.
	// It uses sun.misc.SharedSecrets which is unavailable on Java 9+, and the compilation would fail with JDK 9.
	// This workaround allows compiling the main sourceset on JDK 9+ while still referring to the Java 8 classes.

	sourceSets {
		java8stubs.java.srcDirs = ['src/main/java8stubs']
	}

	tasks.withType(JavaCompile).all {
		sourceCompatibility = targetCompatibility = 8
	}

	tasks.withType(Javadoc).all {
		excludes = ["reactor/core/publisher/Traces.java"]
	}

	dependencies {
		compileOnly sourceSets.java8stubs.output
	}
}
else {
	// reactor.core.publisher.Traces contains a strategy that only works with Java 9+.
	// While compiling on Java 8, we can't access Java 9+ APIs.
	// To workaround this, we "link" the main sourceset to the stubs of Java 9 APIs without having to use the Java 9 target.
	sourceSets {
		java9stubs.java.srcDirs = ['src/main/java9stubs']
	}

	dependencies {
		compileOnly sourceSets.java9stubs.output
	}
}

// docs.zip is added in afterEvaluate block in setup.gradle
