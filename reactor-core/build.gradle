/*
 * Copyright (c) 2011-2018 Pivotal Software Inc, All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import me.champeau.gradle.japicmp.JapicmpTask

buildscript {
	repositories {
		jcenter()
	}

	dependencies {
		// when updating this plugin, revisit pinning the version of the jcstress jar near line 356
		classpath 'com.github.erizo.gradle:jcstress-gradle-plugin:0.8.6'
	}
}

apply plugin: 'idea' //needed to avoid IDEA seeing the jmh folder as source
apply plugin: 'biz.aQute.bnd.builder'
apply plugin: 'org.unbroken-dome.test-sets'
apply plugin: 'kotlin'
apply plugin: 'jcstress'

ext {
	bndOptions = [
		"Export-Package": [
			"!*internal*",
			"!reactor.blockhound*",
			"reactor.*;version=$osgiVersion"
		].join(","),
		"Import-Package": [
			"!javax.annotation",
			"!javax.annotation.meta",
			'org.slf4j;resolution:=optional;version="[1.5.4,2)"',
			"kotlin.*;resolution:=optional",
			"reactor.blockhound.*;resolution:=optional",
			"io.micrometer.*;resolution:=optional",
			"*"
		].join(","),
		"Bundle-Name" : "reactor-core",
		"Bundle-SymbolicName" : "io.projectreactor.reactor-core",
		"Bundle-Version" : "$osgiVersion"
	]
}

testSets {
	blockHoundTest
	withMicrometerTest
}

configurations {
	compileOnly.extendsFrom jsr166backport
	testCompileOnly.extendsFrom jsr166backport
}

dependencies {
	// Reactive Streams
	api "org.reactivestreams:reactive-streams:${reactiveStreamsVersion}"
	testImplementation ("org.reactivestreams:reactive-streams-tck:${reactiveStreamsVersion}") {
		// without this exclusion, testng brings an old version of junit which *embeds* an old version of hamcrest
		// which gets picked up first and that we don't want. TCK runs fine w/o (old) junit 4.
		exclude group: 'junit', module: 'junit'
	}

	// JSR-305 annotations
	compileOnly "com.google.code.findbugs:jsr305:${findbugsVersion}"
	testCompileOnly "com.google.code.findbugs:jsr305:${findbugsVersion}"

	//Optional Logging Operator
	compileOnly "org.slf4j:slf4j-api:$slf4jVersion"
	testCompileOnly "org.slf4j:slf4j-api:$slf4jVersion"

	//Optional Metrics
	compileOnly "io.micrometer:micrometer-core:$micrometerVersion"

	// Not putting kotlin-stdlib as implementation to not force it as a transitive lib
	compileOnly "org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"
	testImplementation "org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"

	//Optional BlockHound support
	compileOnly "io.projectreactor.tools:blockhound:$blockhoundVersion"
	// Also make BlockHound visible in the CP of dedicated testset
	blockHoundTestImplementation "io.projectreactor.tools:blockhound:$blockhoundVersion"

	//Optional JDK 9 Converter
	jsr166backport "io.projectreactor:jsr166:$jsr166BackportVersion"

	testImplementation platform("org.junit:junit-bom:${jUnitPlatformVersion}")
	testImplementation "org.junit.jupiter:junit-jupiter-api"
	testImplementation "org.junit.platform:junit-platform-launcher"
	testImplementation "org.junit.jupiter:junit-jupiter-params"
	testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"

	testImplementation "ch.qos.logback:logback-classic:$logbackVersion"
	// Testing
	testImplementation(project(":reactor-test")) {
		exclude module: 'reactor-core'
	}

	testImplementation "org.assertj:assertj-core:$assertJVersion"
	testImplementation "org.mockito:mockito-core:$mockitoVersion"
	testImplementation "org.openjdk.jol:jol-core:$javaObjectLayoutVersion"
	testImplementation "org.awaitility:awaitility:$awaitilityVersion"
	testImplementation "com.pivovarit:throwing-function:$throwingFunctionVersion"
	testImplementation "com.tngtech.archunit:archunit:0.12.0"

	// withMicrometerTest is a test-set that validates what happens when micrometer *IS*
	// on the classpath. Needs sourceSets.test.output because tests there use helpers like AutoDisposingRule etc.
	withMicrometerTestImplementation "io.micrometer:micrometer-core:$micrometerVersion"
	withMicrometerTestImplementation sourceSets.test.output

  	jcstressImplementation(project(":reactor-test")) {
	  exclude module: 'reactor-core'
	}
  	jcstressImplementation "ch.qos.logback:logback-classic:$logbackVersion"

}

task downloadBaseline(type: Download) {
	onlyIfNewer true
	compress true

	src "${repositories.jcenter().url}io/projectreactor/reactor-core/$compatibleVersion/reactor-core-${compatibleVersion}.jar"
	dest "${buildDir}/baselineLibs/reactor-core-${compatibleVersion}.jar"
}

task japicmp(type: JapicmpTask) {
	if (project.gradle.startParameter.isOffline()) {
		println "Offline: skipping downloading of baseline and JAPICMP"
	  	enabled = false
	}
	else if ("$compatibleVersion" == "SKIP") {
		println "SKIP: Instructed to skip the baseline comparison"
	  	enabled = false
	}
	else {
		println "Will download and perform baseline comparison with ${compatibleVersion}"
	  	dependsOn(downloadBaseline)
	}

	oldClasspath = files("${buildDir}/baselineLibs/reactor-core-${compatibleVersion}.jar")
	newClasspath = files(jar.archiveFile)
	onlyBinaryIncompatibleModified = false
	failOnModification = false
	failOnSourceIncompatibility = false
	txtOutputFile = file("${project.buildDir}/reports/japi.txt")
	ignoreMissingClasses = true
	includeSynthetic = true

	//TODO after a .0 release, bump the gradle.properties baseline
	//TODO after a .0 release, remove the reactor-core exclusions below if any
	classExcludes = [ ]
	methodExcludes = [ ]
}

gradle.taskGraph.afterTask { task, state ->
	if (task instanceof JapicmpTask && state.failure && ((JapicmpTask) task).richReport == null) {
		//FIXME print the rich report somehow on console ?
		print file("${project.buildDir}/reports/japi.txt").getText()
	}
}

//complements the javadoc.gradle common configuration
javadoc {
	options.overview = "$rootDir/docs/api/overview.html"
	excludes = [
			// Must be public due to the ServiceLoader's requirements
			"reactor/core/scheduler/ReactorBlockHoundIntegration.java"
	]
	doLast {
		// work around https://github.com/gradle/gradle/issues/4046
		copy {
			from('src/main/java')
			into "$project.buildDir/docs/javadoc/"
			include "**/doc-files/**/*"
		}
	}
}

task loops(type: Test, group: 'verification') {
	include '**/*Loop.*'
	doFirst {
		println "Additional tests from `loops` ($includes)"
	}
}

task reactivestreamsTCK(type: Test, group: 'verification') {
	include '**/*Verification.*'
	doFirst {
		println "Additional tests from `${name}` (${includes})"
	}
}

tasks.withType(Test).all {
	if (it.name == "reactivestreamsTCK") {
		useTestNG()
	} else {
		def tags = rootProject.findProperty("junit-tags")
		if (tags != null) {
			println "junit5 tags for core: $tags"
			useJUnitPlatform() {
				includeTags "$tags"
			}
		}
		else {
			useJUnitPlatform()
		}
	}
}


blockHoundTest {
	// Creates a JVM per test because the agent can be installed only once
	forkEvery = 1
	maxParallelForks = 1
}

//inherit basic test task + common configuration in root
//always depend on testNoMicrometer, skip reactivestreamsTCK on Travis, skip loops when not releasing
//note that this way the tasks can be run individually
check {
	dependsOn withMicrometerTest
	if (!detectedCiServers.contains("TRAVIS")) {
		dependsOn reactivestreamsTCK
	}
	if (!version.endsWith('-SNAPSHOT') && !version.contains('-SNAPSHOT-')) { //neither classic nor customized snapshots
		dependsOn loops
	}
}

//TODO all java9 / stubs / java-specific stuff should go in a convention plugin ?
if (!JavaVersion.current().isJava9Compatible()) {
	test {
		jvmArgs = ["-Xbootclasspath/p:" + configurations.jsr166backport.asPath]
	}
}

jar {
	manifest {
		attributes 'Implementation-Title': 'reactor-core',
			'Implementation-Version': project.version,
			'Automatic-Module-Name': 'reactor.core'
	}
	bnd(bndOptions)
}

jacocoTestReport.dependsOn test
check.dependsOn jacocoTestReport
check.dependsOn japicmp

jcstress {
	mode = 'quick'
	jcstressDependency = "org.openjdk.jcstress:jcstress-core:0.7"
}
tasks.check.dependsOn(tasks.jcstress)

if (JavaVersion.current().java9Compatible) {
	// SharedSecretsCallSiteSupplierFactory is a Java 8 specific optimization.
	// It uses sun.misc.SharedSecrets which is unavailable on Java 9+, and the compilation would fail with JDK 9.
	// This workaround allows compiling the main sourceset on JDK 9+ while still referring to the Java 8 classes.

	sourceSets {
		java8stubs.java.srcDirs = ['src/main/java8stubs']
	}

	tasks.withType(JavaCompile).all {
		sourceCompatibility = targetCompatibility = 8
	}

	tasks.withType(Javadoc).all {
		excludes = ["reactor/core/publisher/Traces.java"]
	}

	dependencies {
		compileOnly sourceSets.java8stubs.output
	}
}
else {
	// reactor.core.publisher.Traces contains a strategy that only works with Java 9+.
	// While compiling on Java 8, we can't access Java 9+ APIs.
	// To workaround this, we "link" the main sourceset to the stubs of Java 9 APIs without having to use the Java 9 target.
	sourceSets {
		java9stubs.java.srcDirs = ['src/main/java9stubs']
	}

	dependencies {
		compileOnly sourceSets.java9stubs.output
	}
}

//add docs.zip to the publication
publishing.publications.mavenJava.artifact(rootProject.tasks.docsZip)
