/*
 * Copyright (c) 2022 VMware Inc. or its affiliates, All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'biz.aQute.bnd.builder'
apply plugin: 'java-library'

description = 'Reactor-Core Micrometer Metrics support'

version = "$metricsMicrometerVersion"
group = "io.projectreactor"

ext {
	def osgiVersion = osgiVersion("$metricsMicrometerVersion")

	bndOptions = [
		"Export-Package": [
			"!*internal*",
			"reactor.core.observability.micrometer*;version=$osgiVersion;-noimport:=true"
		].join(","),
		"Import-Package": [
			"!javax.annotation",
			"*"
		].join(","),
		"Bundle-Name" : "reactor-core-micrometer",
		"Bundle-SymbolicName" : "io.projectreactor.reactor-core-micrometer",
		"Bundle-Version" : "$osgiVersion"
	]
}

dependencies {
	api project(":reactor-core")
	compileOnly libs.jsr305

	implementation platform(libs.micrometer.bom)
	api libs.micrometer.core
	compileOnly libs.micrometer.contextPropagation
}

// using incubating testSuite plugin, all but the default `test` suite use JUnit5 by default
testing {
	suites {
		test {
			useJUnitJupiter(libs.versions.junit.get())

			dependencies {
				//JUnit Jupiter bom, api and engine are brought by useJUnitJupiter
				implementation libs.junit.platform
				implementation libs.junit.params

				//project already has Micrometer BOM and core dependencies
				implementation libs.micrometer.test
				implementation libs.micrometer.observation.test
				implementation libs.micrometer.tracing.test
				implementation libs.micrometer.contextPropagation

				implementation(project(":reactor-test")) {
					exclude module: 'reactor-core'
				}
				// Needs sourceSets.test.output because tests there use helpers like AutoDisposingRule etc.
				implementation project(":reactor-core").sourceSets.test.output
				runtimeOnly libs.logback
				implementation libs.assertj
				implementation libs.mockito
			}
		}

		noContextPropagationTest(JvmTestSuite) {
			useJUnitJupiter(libs.versions.junit.get())
			dependencies {
				implementation project

				implementation libs.junit.platform
				implementation libs.junit.params

				implementation project.dependencies.platform(libs.micrometer.bom)
				implementation libs.micrometer.core
				implementation libs.micrometer.test
				implementation libs.micrometer.observation.test
//				runtimeOnly libs.micrometer.tracing.test //WHY DOES THIS ADD CONTEXT PROPAGATION ?

				runtimeOnly libs.logback
				implementation libs.assertj
				implementation libs.mockito
			}

			targets {
				all {
					testTask.configure {
						shouldRunAfter(test)
					}
				}
			}
		}
	}
}

tasks.named('check') {
	dependsOn(testing.suites.noContextPropagationTest)
}

// javadoc is configured in gradle/javadoc.gradle

jar {
	manifest {
		attributes 'Implementation-Title': 'reactor-core-micrometer',
			'Implementation-Version': project.version,
			'Automatic-Module-Name': 'reactor.core.micrometer'
	}
	bnd(bndOptions)
}

//TODO once 1.0.0 is released, introduce JAPICMP checks