name: Release Notes Drafter
on:
  push:
    branches: # For branches, better to list them explicitly than regexp include
      - main
      - 1.0.x
jobs:
  releaseDraft:
    # Note this job has no access to secrets, only github token. When possible we favor plain run of gradle tasks.
    name: release-draft
    runs-on: ubuntu-20.04
    steps:
      - uses: actions/checkout@v2
      - name: setup java
        uses: actions/setup-java@v2
        with:
          distribution: 'temurin'
          java-version: 8
      - name: notes metadata from version
        id: version
        #we only run the qualifyNotesGha task so that no other console printing can hijack this step's output
        #output:
        #  fullVersion: ${{ steps.version.outputs.fullVersion }} the full version string, including snapshot qualifier
        #  notesFrom: ${{ steps.version.outputs.notesFrom }} the vTag to generate notes from, or SKIP if no notes should be generated (ie not a snapshot)
        #  notesName: ${{ steps.version.outputs.notesName }} the vTag and name of the draft release, or SKIP if no notes should be generated (ie not a snapshot)
        #fails if version cannot be qualified, which interrupts the workflow. if no notes should be created, notesFrom is set to SKIP
        run: .gradlew qualifyNotesGha
      - name: compile release notes
        uses: mikepenz/release-changelog-builder-action@v2.7.1
        id: notes
        if: steps.version.outputs.notesFrom != 'SKIP'
        with:
          fromTag: ${{ steps.version.outputs.notesFrom }}
          toTag: ${{ github.sha }}
          configuration: '.github/drafter-config.json'
          outputFile: releaseNote.md
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: draft a github release
        uses: ncipollo/release-action@v1
        id: releaseDraft
        if: steps.version.outputs.notesFrom != 'SKIP'
        with:
          bodyFile: "releaseNote.md"
          allowUpdates: true
          draft: true
          name: ${{ steps.version.outputs.notesName }}
          commit: ${{ github.ref_name }}
          tag: ${{ steps.version.outputs.notesName }}
          token: ${{ secrets.GITHUB_TOKEN }}