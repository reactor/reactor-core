/*
 * Copyright (c) 2011-2019 Pivotal Software Inc, All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import me.champeau.gradle.japicmp.JapicmpTask

apply plugin: 'biz.aQute.bnd.builder'
apply plugin: 'kotlin'

description = 'Reactor Test support'

ext {
	bndOptions = [
		"Export-Package": [
			"!*internal*",
			"reactor.test*;version=$osgiVersion;-noimport:=true"
		].join(","),
		"Import-Package": [
			"!javax.annotation",
			"kotlin.*;resolution:=optional,*"
		].join(","),
		"Bundle-Name" : "reactor-test",
		"Bundle-SymbolicName" : "io.projectreactor.reactor-test",
		"Bundle-Version" : "$osgiVersion"
	]
}

dependencies {
	api project(":reactor-core")
	compileOnly "com.google.code.findbugs:jsr305:${findbugsVersion}"

	// Not putting kotlin-stdlib as implementation to not force it as a transitive lib
	compileOnly "org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"
	testImplementation "org.jetbrains.kotlin:kotlin-stdlib:${kotlinVersion}"

	testImplementation platform("org.junit:junit-bom:${jUnitPlatformVersion}")
	testImplementation "org.junit.jupiter:junit-jupiter-api"
	testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine"
	testRuntimeOnly "ch.qos.logback:logback-classic:$logbackVersion"

	testImplementation "org.assertj:assertj-core:$assertJVersion"
	testImplementation "org.mockito:mockito-core:$mockitoVersion"
}

task downloadBaseline(type: Download) {
	onlyIfNewer true
	compress true

	src "${repositories.jcenter().url}io/projectreactor/reactor-test/$compatibleVersion/reactor-test-${compatibleVersion}.jar"
	dest "${buildDir}/baselineLibs/reactor-test-${compatibleVersion}.jar"

	finalizedBy { japicmp }
}

task japicmp(type: JapicmpTask) {
	if (project.gradle.startParameter.isOffline()) {
		println "Offline: skipping downloading of baseline and JAPICMP"
	  	enabled = false
	}
	else if ("$compatibleVersion" == "SKIP") {
		println "SKIP: Instructed to skip the baseline comparison"
	  	enabled = false
	}
	else {
		println "Will download and perform baseline comparison with ${compatibleVersion}"
	  	dependsOn(downloadBaseline)
	}

	oldClasspath = files("${buildDir}/baselineLibs/reactor-test-${compatibleVersion}.jar")
	newClasspath = files(jar.archiveFile)
	onlyBinaryIncompatibleModified = true
	failOnModification = true
	failOnSourceIncompatibility = true
	txtOutputFile = file("${project.buildDir}/reports/japi.txt")
	ignoreMissingClasses = true
	includeSynthetic = true

	//TODO after a .0 release, remove the reactor-test exclusions below if any
	methodExcludes = [ ]
}

tasks.withType(Test).all {
  useJUnitPlatform()
}

//javadoc is configured in gradle/javadoc.gradle

jar {
	manifest {
		attributes 'Implementation-Title': 'reactor-test',
			'Implementation-Version': project.version,
			'Automatic-Module-Name': 'reactor.test'
	}
	bnd(bndOptions)
}

tasks.withType(Test).all {
	useJUnitPlatform()
}

check.dependsOn japicmp