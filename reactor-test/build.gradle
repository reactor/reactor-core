/*
 * Copyright (c) 2011-2019 Pivotal Software Inc, All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import me.champeau.gradle.japicmp.JapicmpTask

apply plugin: 'osgi'
apply plugin: 'kotlin'

description = 'Reactor Test support'

dependencies {
  compile project(":reactor-core")

  testCompile "junit:junit:$jUnitVersion"

  testRuntime "ch.qos.logback:logback-classic:$logbackVersion"

  testCompile "org.assertj:assertj-core:$assertJVersion",
          "org.mockito:mockito-core:$mockitoVersion"
}

task downloadBaseline {
  if (project.gradle.startParameter.isOffline()) {
    println "Offline: skipping downloading of baseline and JAPICMP"
  }
  else if ("$compatibleVersion" == "SKIP") {
    println "SKIP: Instructed to skip the baseline comparison"
  }
  else {
    println "Will download and perform baseline comparison with ${compatibleVersion}"
    finalizedBy { doDownloadBaseline }
  }
}

task doDownloadBaseline(type: Download) {
  onlyIfNewer true
  compress true

  src "${repositories.jcenter().url}io/projectreactor/reactor-test/$compatibleVersion/reactor-test-${compatibleVersion}.jar"
  dest "${buildDir}/baselineLibs/reactor-test-${compatibleVersion}.jar"

  finalizedBy { japicmp }
}

task japicmp(type: JapicmpTask) {
  oldClasspath = files("${buildDir}/baselineLibs/reactor-test-${compatibleVersion}.jar")
  newClasspath = files(jar.archivePath)
  onlyBinaryIncompatibleModified = true
  failOnModification = true
  failOnSourceIncompatibility = true
  txtOutputFile = file("${project.buildDir}/reports/japi.txt")
  ignoreMissingClasses = true
  includeSynthetic = true

  //TODO after a release, remove the reactor-test exclusions below if any
}

//javadoc is configured in gradle/javadoc.gradle

jar {
  manifest {
    attributes 'Implementation-Title': 'reactor-test',
            'Implementation-Version': version,
            'Automatic-Module-Name': 'reactor.test'
  }
}

jar.finalizedBy(downloadBaseline)