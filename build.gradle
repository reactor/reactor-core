/*
 * Copyright (c) 2011-2016 the original author or authors.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

buildscript {
  repositories {
    maven { url "http://repo.spring.io/plugins-release" }
  }
  dependencies {
    classpath 'org.springframework.build.gradle:propdeps-plugin:0.0.7',
            'io.spring.gradle:spring-io-plugin:0.0.4.RELEASE',
            'com.github.jengelman.gradle.plugins:shadow:1.2.0',
            'org.asciidoctor:asciidoctorj-pdf:1.5.0-alpha.11'
  }
}

plugins {
  id 'org.asciidoctor.convert' version '1.5.2'
}

description = 'Non-Blocking Reactive Foundation for the JVM'
group = 'io.projectreactor'

ext {
  gradleVersion = '3.1'
  gradleScriptDir = "${rootProject.projectDir}/gradle"

  // Logging
  slf4jVersion = '1.7.12'
  logbackVersion = '1.1.2'

  // Testing
  assertJVersion = '3.6.1'
  testAddonVersion = '3.0.5.BUILD-SNAPSHOT'
  javadocLinks = ["http://docs.oracle.com/javase/8/docs/api/",
				  "http://docs.oracle.com/javaee/6/api/",
				  "http://www.reactive-streams.org/reactive-streams-1.0.0-javadoc/"] as String[]


  bundleImportPackages = ['org.slf4j;resolution:=optional;version="[1.5.4,2)"',
						  'rx;resolution:=optional',
						  'com.google;resolution:=optional',
						  'com.google;resolution:=optional',
						  '*']

}

apply plugin: 'java'
apply plugin: 'jacoco'
apply from: "$gradleScriptDir/setup.gradle"
apply plugin: 'propdeps'
apply plugin: 'osgi'
apply from: "${gradleScriptDir}/ide.gradle"

jacoco {
  toolVersion = '0.7.7.201606060606'
}

jacocoTestReport {
  reports {
	xml.enabled = true
	html.enabled = true
  }
}

if (project.hasProperty('platformVersion')) {
  apply plugin: 'spring-io'

  dependencyManagement {
    springIoTestRuntime {
      imports {
        mavenBom "io.spring.platform:platform-bom:$platformVersion"
      }
    }
  }
}

[compileJava, compileTestJava]*.options*.compilerArgs = ["-Xlint:-varargs", // intentionally disabled
														 "-Xlint:cast",
														 "-Xlint:classfile",
														 "-Xlint:dep-ann",
														 "-Xlint:divzero",
														 "-Xlint:empty",
														 "-Xlint:finally",
														 "-Xlint:overrides",
														 "-Xlint:path",
														 "-Xlint:processing",
														 "-Xlint:static",
														 "-Xlint:try",
														 "-Xlint:deprecation",
														 "-Xlint:unchecked",
														 "-Xlint:-serial",      // intentionally disabled
														 "-Xlint:-options",     // intentionally disabled
														 "-Xlint:-fallthrough", // intentionally disabled
														 "-Xlint:-rawtypes"     // TODO enable and fix warnings
]

compileJava {
  sourceCompatibility = 1.8
  targetCompatibility = 1.8
}

compileTestJava {
  sourceCompatibility = 1.8
  targetCompatibility = 1.8
}

if (JavaVersion.current().isJava8Compatible()) {
  compileTestJava.options.compilerArgs += "-parameters"
  tasks.withType(Javadoc) {
	options.addStringOption('Xdoclint:none', '-quiet')
  }
}

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'


project.tasks.withType(Test).all {
  systemProperty("java.awt.headless", "true")
  systemProperty("reactor.trace.cancel", "true")
  systemProperty("reactor.trace.nocapacity", "true")
  systemProperty("testGroups", project.properties.get("testGroups"))
  scanForTestClasses = false
  include '**/*Tests.*'
  include '**/*Test.*'
  include '**/*Spec.*'
  if(!version.contains("SNAPSHOT")){
	include '**/*Loop.*'
  }
  exclude '**/*Abstract*.*'
  exclude '**/*OperatorTest*.*'
}

configure(rootProject) {
  repositories {
	mavenCentral()
	jcenter()
	maven { url 'http://repo.spring.io/libs-milestone' }
	maven { url "https://oss.sonatype.org/content/repositories/releases/" }

	if (version.endsWith('BUILD-SNAPSHOT') || project.hasProperty('platformVersion')) {
	  mavenLocal()
	  maven { url 'http://repo.spring.io/libs-snapshot' }
	}

  }

  configurations {
    compileOnly.extendsFrom jsr166backport
    testCompile.extendsFrom jsr166backport
  }

// dependencies that are common across all java projects
  dependencies {
    // Reactive Streams
    compile "org.reactivestreams:reactive-streams:1.0.0"
    testCompile "org.reactivestreams:reactive-streams-tck:1.0.0"

    // JSR-305 annotations
    optional "com.google.code.findbugs:jsr305:3.0.0"

    //Optional Logging Operator
    optional "org.slf4j:slf4j-api:$slf4jVersion"

    //Optional JDK 9 Converter
    jsr166backport "io.projectreactor:jsr166:1.0.0.RELEASE"
	
	testCompile 'junit:junit:4.12'

	testRuntime "ch.qos.logback:logback-classic:$logbackVersion"
    // Testing
	testCompile("io.projectreactor.addons:reactor-test:$testAddonVersion"){
	  exclude module: 'reactor-core'
	}

    testCompile "org.hamcrest:hamcrest-library:1.3",
            "org.testng:testng:6.8.5",
			"org.assertj:assertj-core:$assertJVersion"
  }

  task loops(type: Test) {
	exclude '**/*'
	include '**/*Loop.*'
  }

  task testNG(type: Test) {
	exclude '**/*'
	include '**/*Verification.*'
	useTestNG()
  }

  sourceSets.test.resources.srcDirs = ["src/test/resources", "src/test/java"]

  test {
	  testLogging {
		events  "passed", "failed"
		showExceptions true
		exceptionFormat "full"
		maxGranularity 3
	}
  }

  if (!JavaVersion.current().isJava9Compatible()) {
	test {
	  jvmArgs = ["-Xbootclasspath/p:" + configurations.jsr166backport.asPath]
	}
  }


  jar {
    manifest {
	  attributes 'Implementation-Title': 'reactor-core',
		'Implementation-Version': version
      instruction 'Import-Package', bundleImportPackages.join(',')
    }
  }
}

jacocoTestReport.dependsOn testNG
check.dependsOn jacocoTestReport
