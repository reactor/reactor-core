/*
 * Copyright (c) 2011-2021 VMware Inc. or its affiliates, All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

configure(rootProject) {
	apply plugin: 'org.asciidoctor.jvm.convert'
	apply plugin: 'org.asciidoctor.jvm.pdf'

	repositories {
		maven { url 'https://repo.spring.io/milestone' }
	}

	// This configuration applies both to the asciidoctor & asciidoctorPdf tasks
	asciidoctorj {
		options = [doctype: 'book']
		attributes 'allow-uri-read': '',
				'attribute-missing': 'warn',
				'project-version': "${project.version}",
				'reactorReleaseTrain': "${bomVersion}"
	}

	asciidoctor {
		dependsOn "generateObservabilityDocs"
		inputs.dir("$buildDir/generatedMetricsDocs/") // force the task to consider changes in this folder, making it not UP-TO-DATE
		sourceDir "docs/asciidoc/"
		sources {
			include "index.asciidoc"
		}
		baseDirFollowsSourceDir()
		resources {
			from(sourceDir) {
				include 'images/**'
				include 'highlight/**/*'
			}

		}
		outputDir file("$buildDir/docs/asciidoc/html")
		logDocuments = true
		attributes stylesdir: "stylesheets/",
				stylesheet: 'reactor.css',
				'source-highlighter': 'highlightjs',
				'highlightjsdir': "./highlight",
				'highlightjs-theme': 'railscasts',
				'reactorReleaseTrain': "$bomVersion"
	}

	asciidoctorPdf {
		onlyIf { isCiServer || !rootProject.version.toString().endsWith("-SNAPSHOT") || rootProject.hasProperty("forcePdf") }
		sourceDir "docs/asciidoc/"
		sources {
			include "index.asciidoc"
		}
		baseDirFollowsSourceDir()
		outputDir file("$buildDir/docs/asciidoc/pdf")
		logDocuments = true
		attributes 'source-highlighter': 'rouge'
	}

	task docsZip(type: Zip, dependsOn: [asciidoctor, asciidoctorPdf]) {
		archiveBaseName.set("reactor-core")
		archiveClassifier.set('docs')
		afterEvaluate() {
			//we configure the pdf copy late, when a potential customVersion has been applied to rootProject
			from(asciidoctorPdf) {
				into ("docs/")
				rename("index.pdf", "reactor-core-reference-guide-${rootProject.version}.pdf")
			}
		}
		from(asciidoctor) { into("docs/") }
	}

	configurations {
		adoc
	}

	dependencies {
		//FIXME add to version catalog
		adoc "io.micrometer:micrometer-docs-generator-metrics:1.0.0-M6"
	}

	task generateObservabilityDocs(dependsOn: [
		"generateMeterListenerDocs",
		"polishMeterListenerDocs",
		"generateTimedSchedulerDocs",
		"polishTimedSchedulerDocs"
		/*, "generateObservabilitySpansDocs"*/]) {
	}

	//TODO generate and polish for MicrometerObservationListener

	task generateMeterListenerDocs(type: JavaExec) {
		mainClass.set("io.micrometer.docs.metrics.DocsFromSources")
		classpath configurations.adoc
		args project.rootDir.getAbsolutePath(), ".*PublisherMeters.java", project.rootProject.buildDir.toPath().resolve("generatedMetricsDocs/meterListener").toAbsolutePath().toString()
	}

	task polishMeterListenerDocs(type: Copy) {
		mustRunAfter "generateMeterListenerDocs"
		from project.rootProject.buildDir.toString() + "/generatedMetricsDocs/meterListener/"
		into project.rootProject.buildDir.toString() + "/documentedMetrics"
		include "_*.adoc"
		rename '_metrics.adoc', 'meterListener.adoc'
		filter { String line ->
			line.startsWith('[[observability-metrics]]') ||
				line.startsWith('=== Observability - Metrics') ||
				line.startsWith('Below you can find a list of all samples ')
				? null : line
		}
		filter { String line -> line.startsWith("====") ? line.replaceFirst("====", "=") : line }
	}

	task generateTimedSchedulerDocs(type: JavaExec) {
		mainClass.set("io.micrometer.docs.metrics.DocsFromSources")
		classpath configurations.adoc
		args project.rootDir.getAbsolutePath(), ".*SchedulerMeters.java", project.rootProject.buildDir.toPath().resolve("generatedMetricsDocs/timedScheduler").toAbsolutePath().toString()
	}

	task polishTimedSchedulerDocs(type: Copy) {
		mustRunAfter "generateTimedSchedulerDocs"
		from project.rootProject.buildDir.toString() + "/generatedMetricsDocs/timedScheduler/"
		into project.rootProject.buildDir.toString() + "/documentedMetrics"
		include "_*.adoc"
		rename '_metrics.adoc', 'timedScheduler.adoc'
		filter { String line ->
			line.startsWith('[[observability-metrics]]') ||
				line.startsWith('=== Observability - Metrics') ||
				line.startsWith('Below you can find a list of all samples ')
				? null : line
		}
		filter { String line -> line.startsWith("====") ? line.replaceFirst("====", "=") : line }
	}


//
//	task generateObservabilitySpansDocs(type: JavaExec) {
//		mainClass = "io.micrometer.docs.spans.DocsFromSources"
//		classpath configurations.adoc
//		args project.rootDir.getAbsolutePath(), ".*", project.rootProject.buildDir.getAbsolutePath()
//	}
}

