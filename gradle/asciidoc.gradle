/*
 * Copyright (c) 2011-2017 Pivotal Software Inc, All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *       https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

configure(rootProject) {
	repositories {
		jcenter()
	}

	apply plugin: 'org.asciidoctor.jvm.convert'
	apply plugin: 'org.asciidoctor.jvm.pdf'

	// This configuration applies both to the asciidoctor & asciidoctorPdf tasks
	asciidoctorj {
		options = [doctype: 'book']
		attributes 'allow-uri-read': '',
				'attribute-missing': 'warn',
				'project-version': "${project.version}",
				'reactorReleaseTrain': "${bomVersion}"
	}

	asciidoctor {
		sourceDir "docs/asciidoc/"
		sources {
			include "index.asciidoc"
		}
		baseDirFollowsSourceDir()
		resources {
			from(sourceDir) {
				include 'images/**'
				include 'highlight/**/*'
			}

		}
		outputDir file("$buildDir/docs/asciidoc/html")
		logDocuments = true
		attributes stylesdir: "stylesheets/",
				stylesheet: 'reactor.css',
				'source-highlighter': 'highlightjs',
				'highlightjsdir': "./highlight",
				'highlightjs-theme': 'railscasts'
	}

	asciidoctorPdf {
		onlyIf { isCiServer || !rootProject.version.toString().endsWith("-SNAPSHOT") || rootProject.hasProperty("forcePdf") }
		sourceDir "docs/asciidoc/"
		sources {
			include "index.asciidoc"
		}
		baseDirFollowsSourceDir()
		outputDir file("$buildDir/docs/asciidoc/pdf")
		logDocuments = true
		attributes 'source-highlighter': 'rouge'
	}

	task docsZip(type: Zip, dependsOn: [asciidoctor, asciidoctorPdf]) {
		archiveBaseName.set("reactor-core")
		archiveClassifier.set('docs')
		afterEvaluate() {
			//we configure the pdf copy late, when a potential customVersion has been applied to rootProject
			from(asciidoctorPdf) {
				into ("docs/")
				rename("index.pdf", "reactor-core-reference-guide-${rootProject.version}.pdf")
			}
		}
		from(asciidoctor) { into("docs/") }
	}
}

