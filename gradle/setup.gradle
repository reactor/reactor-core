/*
 * Copyright (c) 2011-2021 VMware Inc. or its affiliates, All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   https://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

import org.gradle.util.VersionNumber

if (project.name == 'benchmarks')
	return

apply plugin: 'maven-publish'
//we also conditionally apply artifactory and signing plugins below

jar {
	manifest.attributes["Created-By"] = "${System.getProperty("java.version")} (${System.getProperty("java.specification.vendor")})"
	manifest.attributes["Implementation-Title"] = project.name
	manifest.attributes["Implementation-Version"] = project.version
}

task sourcesJar(type: Jar) {
	archiveClassifier.set('sources')
	from sourceSets.main.allSource
}

task javadocJar(type: Jar) {
	archiveClassifier.set('javadoc')
	from javadoc
}

static def qualifyVersion(String v) {
	def versionNumber = VersionNumber.parse(v)

	if (versionNumber == VersionNumber.UNKNOWN) return "BAD";

	if (versionNumber.qualifier == null || versionNumber.qualifier.size() == 0) return "RELEASE" //new scheme
	if (versionNumber.qualifier == "RELEASE") return "RELEASE" //old scheme
	if (versionNumber.qualifier.matches("(?:M|RC)\\d+")) return "MILESTONE"
	if (versionNumber.qualifier == "SNAPSHOT" || versionNumber.qualifier == "BUILD-SNAPSHOT") return "SNAPSHOT"

	return "BAD"
}

task qualifyVersionGha() {
	doLast {
		def versionType = qualifyVersion("$version")

		println "::set-output name=versionType::$versionType"
		println "::set-output name=fullVersion::$version"
		if (versionType == "BAD") {
			println "::error ::Unable to parse $version to a VersionNumber with recognizable qualifier"
			throw new TaskExecutionException(tasks.getByName("qualifyVersionGha"), new IllegalArgumentException("Unable to parse $version to a VersionNumber with recognizable qualifier"))
		}
	}
}

publishing {
	repositories {
		maven {
			name = "mock"
			url = "${rootProject.buildDir}/repo"
		}
		if (qualifyVersion("$version") == "RELEASE") {
			maven {
				name = "sonatype"
				url = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2"
				credentials {
					username findProperty("sonatypeUsername")
					password findProperty("sonatypePassword")
				}
			}
		}
	}

	publications {
		mavenJava(MavenPublication) {
			from components.java
			artifact sourcesJar
			artifact javadocJar
			//consider adding extra artifacts here, conditionally on submodule's name and perhaps in an afterEvaluate block
			afterEvaluate {
				if (project.name == 'reactor-core') {
					artifact rootProject.tasks.docsZip
				}
				// note that reactor-tools has more involved stuff, so we kept it in the submodule's build:
				// (it replaces the original jar with shadow jar and adds the former as -original.jar)
			}


			pom {
				afterEvaluate {
					name = project.description
					description = project.description
				}
				packaging = 'jar' //if not explicitly set, end up as `pom` in output. omitted in output if set as `jar`...
				url = 'https://github.com/reactor/reactor-core'
				organization {
					name = 'reactor'
					url = 'https://github.com/reactor'
				}
				licenses {
					license {
						name = 'Apache License, Version 2.0'
						url = 'https://www.apache.org/licenses/LICENSE-2.0.txt'
						distribution = 'repo'
					}
				}
				scm {
					url = 'https://github.com/reactor/reactor-core'
					connection = 'scm:git:git://github.com/reactor/reactor-core'
					developerConnection = 'scm:git:git://github.com/reactor/reactor-core'
				}
				developers {
					developer {
						id = 'simonbasle'
						name = 'Simon Basl√©'
						email = 'sbasle@vmware.com'
					}
					developer {
						id = 'odokuka'
						name = 'Oleh Dokuka'
						email = 'odokuka@vmware.com'
					}
				}
				issueManagement {
					system = "GitHub Issues"
					url = "https://github.com/reactor/reactor-core/issues"
				}
				//NB: only the direct dependencies are published in the pom (ie. only reactive-streams)
				//optional dependencies are not published anymore, see https://github.com/reactor/reactor-core/issues/2262
			}
		}
	}
}

if (rootProject.hasProperty("artifactory_publish_password")) {
	apply plugin: "com.jfrog.artifactory"

	artifactoryPublish {
		publications(publishing.publications.mavenJava)
	}
}

if (qualifyVersion("$version") in ["RELEASE", "MILESTONE"] || rootProject.hasProperty("forceSigning")) {
	apply plugin: 'signing'

	signing {
		//requiring signature if there is a publish task that is not to MavenLocal
		required {  gradle.taskGraph.allTasks.any { it.name.toLowerCase().contains("publish")	&& !it.name.contains("MavenLocal") } }
		def signingKey = findProperty("signingKey")
		def signingPassword = findProperty("signingPassword")

		useInMemoryPgpKeys(signingKey, signingPassword)

		afterEvaluate {
			sign publishing.publications.mavenJava
		}
	}
}
