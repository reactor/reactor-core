import io.reactor.gradle.JmhExecTask

apply plugin: 'java'
apply plugin: 'idea'

configurations {
  current
  baseline {
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
  }
}

dependencies {
  // Use the baseline to avoid using new APIs in the benchmarks
  compileOnly libs.reactor.perfBaseline.core
  compileOnly libs.jsr305

  implementation "org.openjdk.jmh:jmh-core:$jmhVersion"
  implementation libs.reactor.perfBaseline.extra, {
    exclude group: 'io.projectreactor', module: 'reactor-core'
  }
  annotationProcessor "org.openjdk.jmh:jmh-generator-annprocess:$jmhVersion"

  current project(':reactor-core')
  baseline libs.reactor.perfBaseline.core, {
    changing = true
  }
}

task jmhProfilers(type: JavaExec, description:'Lists the available profilers for the jmh task', group: 'Development') {
  classpath = sourceSets.main.runtimeClasspath
  mainClass.set('org.openjdk.jmh.Main')
  args '-lprof'
}

task jmh(type: JmhExecTask, description: 'Executing JMH benchmarks') {
  classpath = sourceSets.main.runtimeClasspath + configurations.current
}

task jmhBaseline(type: JmhExecTask, description: 'Executing JMH baseline benchmarks') {
  classpath = sourceSets.main.runtimeClasspath + configurations.baseline
}
